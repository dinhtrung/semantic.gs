/////////////////
// Semantic.gs // for SCSS: http://sass-lang.com/
/////////////////

// Defaults which you can freely override
$column-width: 60px !default;
$gutter-width: 20px !default;
$columns: 12 !default;

// Utility function â€” you should never need to modify this
@function gridsystem-width($cols: $columns) {
	@return ($column-width * $cols) + ($gutter-width * $cols);
}

// Set $total-width to 100% for a fluid layout
$total-width: gridsystem-width($columns) !default;

// Uncomment these two lines and the star-hack width/margin lines below to enable sub-pixel fix for IE6 & 7. See http://tylertate.com/blog/2012/01/05/subpixel-rounding.html
$min-width: 999999;
$correction: 0.5 / $min-width * 100;

// The micro clearfix http://nicolasgallagher.com/micro-clearfix-hack/
@mixin clearfix() {
	*zoom:1;

	&:before,
	&:after {
		content:"";
		display:table;
	}
	&:after {
		clear:both;
	}
}


//////////
// GRID //
//////////

body {
	width: 100%;
	@include clearfix();
}

@mixin row-base($cols: $columns) {
	display: block;
	width: $total-width*(($gutter-width + gridsystem-width($cols))/gridsystem-width($cols));
	@debug "Gutter width: " + $gutter-width + " Column width: " + $column-width +  "Total width: " + $total-width + " ==> GS Width" + gridsystem-width($cols) + " Result Width: " + $total-width*(($gutter-width + gridsystem-width($cols))/gridsystem-width($cols));
	margin: 0 $total-width*((($gutter-width*.5)/gridsystem-width($cols))*-1);
	.lt-ie8 & {
		*width: $total-width*(($gutter-width + gridsystem-width($cols))/gridsystem-width($cols))-$correction;
		*margin: 0 $total-width*((($gutter-width*.5)/gridsystem-width($cols))*-1)-$correction;
	}
	@include clearfix();
}
@mixin row($cols: $columns){
	$total-width: total-width($cols);
	@include row-base($cols);
}
@mixin column($x,$cols: $columns) {
	display: inline;
	float: left;
	width: $total-width*(((($gutter-width+$column-width)*$x)-$gutter-width) / gridsystem-width($cols));
	margin: 0 $total-width*(($gutter-width*.5)/gridsystem-width($cols));
	.lt-ie8 & {
		*width: $total-width*(((($gutter-width+$column-width)*$x)-$gutter-width) / gridsystem-width($cols))-$correction;
		*margin: 0 $total-width*(($gutter-width*.5)/gridsystem-width($cols))-$correction;
	}
}
@mixin push($offset:1) {
	margin-left: $total-width*((($gutter-width+$column-width)*$offset) / gridsystem-width($columns)) + $total-width*(($gutter-width*.5)/gridsystem-width($columns));
}
@mixin pull($offset:1) {
	margin-right: $total-width*((($gutter-width+$column-width)*$offset) / gridsystem-width($columns)) + $total-width*(($gutter-width*.5)/gridsystem-width($columns));
}


/////////////
// ALIASES //
/////////////
@function total-width($cols: $columns){
	@return gridsystem-width($cols);
}

@mixin col($x, $cols: $columns){
	@include column($x, $cols);
}

@mixin span($x, $cols: $columns){
	@include column($x, $cols);
}
////////////////
// FIXED GRID //
////////////////
@mixin container($cols: $columns){
	$total-width: total-width($cols);
	width: $total-width;
	margin-left: auto;
	margin-right: auto;
}

////////////////
// FLUID GRID //
////////////////
@mixin row-fluid($cols: $columns){
	$total-width: 100%;
	@include row-base($cols);
}

///////////////////////////////////
// TWITTER BOOTSTRAP'S LIKE GRID //
///////////////////////////////////
.container {
	@include container;
}

.row-fluid {
	@include row-fluid;
	@for $i from 1 through $columns {
		.span#{$i}{
			@include column($i);
		}
	}
}

.row {
	@include row;
	@for $i from 1 through $columns {
		.span#{$i}{
			@include column($i);
			.row {
				@for $j from 1 through $i {
					@include column($j, $i);
				}
			}
		}
	}
}
